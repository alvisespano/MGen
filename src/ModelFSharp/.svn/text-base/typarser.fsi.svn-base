// Signature file for parser generated by fsyacc
#light
type token = 
  | ABRA
  | AKET
  | SQBRA
  | SQKET
  | STRING
  | INT
  | BOOL
  | FLOAT
  | DATETIME
  | CHAR
  | BO
  | BOA
  | COLON
  | VOID
  | EOF
  | NAT of (System.Int32)
  | ID of (string)
type tokenId = 
    | TOKEN_ABRA
    | TOKEN_AKET
    | TOKEN_SQBRA
    | TOKEN_SQKET
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_BOOL
    | TOKEN_FLOAT
    | TOKEN_DATETIME
    | TOKEN_CHAR
    | TOKEN_BO
    | TOKEN_BOA
    | TOKEN_COLON
    | TOKEN_VOID
    | TOKEN_EOF
    | TOKEN_NAT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startret
    | NONTERM__startcomplex
    | NONTERM__startsimple
    | NONTERM_simple
    | NONTERM_complex
    | NONTERM_ret
    | NONTERM_simplety
    | NONTERM_complexty
    | NONTERM_special
    | NONTERM_retty
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val ret : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( ret ) 
val complex : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( complex ) 
val simple : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( simple ) 
