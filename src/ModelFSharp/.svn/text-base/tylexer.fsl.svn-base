{

open System
open Typarser
open Lexing

let newline (lexbuf : lexbuf) = lexbuf.EndPos <- lexbuf.EndPos.NextLine

}

let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

rule token = parse
| whitespace	{ token lexbuf }
| newline       { newline lexbuf; token lexbuf }

| '<'			{ ABRA }
| '>'			{ AKET }
| '['			{ SQBRA }
| ']'			{ SQKET }
| ':'			{ COLON }

| "BO"			{ BO }
| "BOA"			{ BOA }

| "void"		{ VOID }
| "string"		{ STRING }
| "int"			{ INT }
| "char"		{ CHAR }
| "float"		{ FLOAT }
| "datetime"	{ DATETIME }
| "bool"		{ BOOL }

| ['A'-'Z']['a'-'z' 'A'-'Z' '0'-'1' '_' '.']*	{ ID (lexeme lexbuf) }
| digit+										{ NAT (Int32.Parse(lexeme lexbuf)) }

| eof			{ EOF }
