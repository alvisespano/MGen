// Implementation file for parser generated by fsyacc
#light
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 2 "typarser.fsy"


open Caffettiera.FSharp.Generator.Tyabsyn


# 12 "typarser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | ABRA
  | AKET
  | SQBRA
  | SQKET
  | STRING
  | INT
  | BOOL
  | FLOAT
  | DATETIME
  | CHAR
  | BO
  | BOA
  | COLON
  | VOID
  | EOF
  | NAT of (System.Int32)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_ABRA
    | TOKEN_AKET
    | TOKEN_SQBRA
    | TOKEN_SQKET
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_BOOL
    | TOKEN_FLOAT
    | TOKEN_DATETIME
    | TOKEN_CHAR
    | TOKEN_BO
    | TOKEN_BOA
    | TOKEN_COLON
    | TOKEN_VOID
    | TOKEN_EOF
    | TOKEN_NAT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startret
    | NONTERM__startcomplex
    | NONTERM__startsimple
    | NONTERM_simple
    | NONTERM_complex
    | NONTERM_ret
    | NONTERM_simplety
    | NONTERM_complexty
    | NONTERM_special
    | NONTERM_retty

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | ABRA  -> 0 
  | AKET  -> 1 
  | SQBRA  -> 2 
  | SQKET  -> 3 
  | STRING  -> 4 
  | INT  -> 5 
  | BOOL  -> 6 
  | FLOAT  -> 7 
  | DATETIME  -> 8 
  | CHAR  -> 9 
  | BO  -> 10 
  | BOA  -> 11 
  | COLON  -> 12 
  | VOID  -> 13 
  | EOF  -> 14 
  | NAT _ -> 15 
  | ID _ -> 16 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_ABRA 
  | 1 -> TOKEN_AKET 
  | 2 -> TOKEN_SQBRA 
  | 3 -> TOKEN_SQKET 
  | 4 -> TOKEN_STRING 
  | 5 -> TOKEN_INT 
  | 6 -> TOKEN_BOOL 
  | 7 -> TOKEN_FLOAT 
  | 8 -> TOKEN_DATETIME 
  | 9 -> TOKEN_CHAR 
  | 10 -> TOKEN_BO 
  | 11 -> TOKEN_BOA 
  | 12 -> TOKEN_COLON 
  | 13 -> TOKEN_VOID 
  | 14 -> TOKEN_EOF 
  | 15 -> TOKEN_NAT 
  | 16 -> TOKEN_ID 
  | 19 -> TOKEN_end_of_input
  | 17 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startret 
    | 1 -> NONTERM__startcomplex 
    | 2 -> NONTERM__startsimple 
    | 3 -> NONTERM_simple 
    | 4 -> NONTERM_complex 
    | 5 -> NONTERM_ret 
    | 6 -> NONTERM_simplety 
    | 7 -> NONTERM_simplety 
    | 8 -> NONTERM_simplety 
    | 9 -> NONTERM_simplety 
    | 10 -> NONTERM_simplety 
    | 11 -> NONTERM_simplety 
    | 12 -> NONTERM_simplety 
    | 13 -> NONTERM_simplety 
    | 14 -> NONTERM_complexty 
    | 15 -> NONTERM_complexty 
    | 16 -> NONTERM_complexty 
    | 17 -> NONTERM_special 
    | 18 -> NONTERM_special 
    | 19 -> NONTERM_retty 
    | 20 -> NONTERM_retty 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 19 
let _fsyacc_tagOfErrorTerminal = 17

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | ABRA  -> "ABRA" 
  | AKET  -> "AKET" 
  | SQBRA  -> "SQBRA" 
  | SQKET  -> "SQKET" 
  | STRING  -> "STRING" 
  | INT  -> "INT" 
  | BOOL  -> "BOOL" 
  | FLOAT  -> "FLOAT" 
  | DATETIME  -> "DATETIME" 
  | CHAR  -> "CHAR" 
  | BO  -> "BO" 
  | BOA  -> "BOA" 
  | COLON  -> "COLON" 
  | VOID  -> "VOID" 
  | EOF  -> "EOF" 
  | NAT _ -> "NAT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | ABRA  -> (null : System.Object) 
  | AKET  -> (null : System.Object) 
  | SQBRA  -> (null : System.Object) 
  | SQKET  -> (null : System.Object) 
  | STRING  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | FLOAT  -> (null : System.Object) 
  | DATETIME  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | BO  -> (null : System.Object) 
  | BOA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | NAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 0us; 65535us; 1us; 65535us; 4us; 5us; 1us; 65535us; 2us; 3us; 1us; 65535us; 0us; 1us; 4us; 65535us; 0us; 29us; 2us; 29us; 4us; 6us; 26us; 29us; 3us; 65535us; 0us; 33us; 2us; 8us; 26us; 27us; 3us; 65535us; 0us; 23us; 2us; 23us; 26us; 23us; 1us; 65535us; 0us; 10us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 3us; 5us; 7us; 9us; 14us; 18us; 22us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 2us; 6us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 2us; 13us; 15us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; |]
let _fsyacc_action_rows = 34
let _fsyacc_actionTableElements = [|10us; 32768us; 4us; 12us; 5us; 16us; 6us; 17us; 7us; 18us; 8us; 20us; 9us; 19us; 10us; 30us; 11us; 31us; 13us; 32us; 16us; 22us; 0us; 49152us; 9us; 32768us; 4us; 12us; 5us; 16us; 6us; 17us; 7us; 18us; 8us; 20us; 9us; 19us; 10us; 30us; 11us; 31us; 16us; 22us; 0us; 49152us; 7us; 32768us; 4us; 12us; 5us; 16us; 6us; 17us; 7us; 18us; 8us; 20us; 9us; 19us; 16us; 21us; 0us; 49152us; 1us; 32768us; 14us; 7us; 0us; 16387us; 1us; 32768us; 14us; 9us; 0us; 16388us; 1us; 32768us; 14us; 11us; 0us; 16389us; 1us; 16390us; 2us; 13us; 1us; 32768us; 15us; 14us; 1us; 32768us; 3us; 15us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 1us; 16397us; 0us; 26us; 1us; 32768us; 12us; 24us; 1us; 32768us; 16us; 25us; 0us; 16398us; 9us; 32768us; 4us; 12us; 5us; 16us; 6us; 17us; 7us; 18us; 8us; 20us; 9us; 19us; 10us; 30us; 11us; 31us; 16us; 22us; 1us; 32768us; 1us; 28us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 11us; 12us; 22us; 23us; 31us; 32us; 34us; 35us; 37us; 38us; 40us; 41us; 43us; 45us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 56us; 58us; 60us; 61us; 71us; 73us; 74us; 75us; 76us; 77us; 78us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 2us; 2us; 2us; 1us; 4us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 4us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 4us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 7us; 8us; 8us; 9us; 9us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 65535us; 49152us; 65535us; 16387us; 65535us; 16388us; 65535us; 16389us; 65535us; 65535us; 65535us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 16397us; 65535us; 65535us; 65535us; 16398us; 65535us; 65535us; 16399us; 16400us; 16401us; 16402us; 16403us; 16404us; |]
let _fsyacc_reductions ()  =    [| 
# 192 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  ret )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startret));
# 201 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  complex )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startcomplex));
# 210 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  simple )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startsimple));
# 219 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simplety)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "typarser.fsy"
                      _1 
                   )
# 23 "typarser.fsy"
                 :  simple ));
# 230 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'complexty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "typarser.fsy"
                      _1 
                   )
# 26 "typarser.fsy"
                 :  complex ));
# 241 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'retty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "typarser.fsy"
                      _1 
                   )
# 29 "typarser.fsy"
                 :  ret ));
# 252 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "typarser.fsy"
                      String None 
                   )
# 32 "typarser.fsy"
                 : 'simplety));
# 262 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "typarser.fsy"
                      if _3 > 0 then String (Some _3) else raise (ParseError "variable string length cannot be zero") 
                   )
# 33 "typarser.fsy"
                 : 'simplety));
# 273 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "typarser.fsy"
                      Int 
                   )
# 34 "typarser.fsy"
                 : 'simplety));
# 283 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "typarser.fsy"
                      Bool 
                   )
# 35 "typarser.fsy"
                 : 'simplety));
# 293 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "typarser.fsy"
                      Float 
                   )
# 36 "typarser.fsy"
                 : 'simplety));
# 303 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "typarser.fsy"
                      Char 
                   )
# 37 "typarser.fsy"
                 : 'simplety));
# 313 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "typarser.fsy"
                      Datetime 
                   )
# 38 "typarser.fsy"
                 : 'simplety));
# 323 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "typarser.fsy"
                      Verbatim _1 
                   )
# 39 "typarser.fsy"
                 : 'simplety));
# 334 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'special)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "typarser.fsy"
                      Special (_1, _3) 
                   )
# 42 "typarser.fsy"
                 : 'complexty));
# 346 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'complexty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "typarser.fsy"
                      App (_1, _3) 
                   )
# 43 "typarser.fsy"
                 : 'complexty));
# 358 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simplety)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "typarser.fsy"
                      Simple _1 
                   )
# 44 "typarser.fsy"
                 : 'complexty));
# 369 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "typarser.fsy"
                      Bo 
                   )
# 47 "typarser.fsy"
                 : 'special));
# 379 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "typarser.fsy"
                      Boa 
                   )
# 48 "typarser.fsy"
                 : 'special));
# 389 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "typarser.fsy"
                      Void 
                   )
# 51 "typarser.fsy"
                 : 'retty));
# 399 "typarser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'complexty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "typarser.fsy"
                      Complex _1 
                   )
# 52 "typarser.fsy"
                 : 'retty));
|]
# 411 "typarser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 20;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let ret lexer lexbuf :  ret  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let complex lexer lexbuf :  complex  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
let simple lexer lexbuf :  simple  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 4))
