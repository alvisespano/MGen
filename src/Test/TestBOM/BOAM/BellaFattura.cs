//
        // BLL/BOAM [C#]
        // Business Object Avatar BellaFattura
        //
        // Generated by MGen/Caffettiera
        // (C) 2008 Netical 
        //
        
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using Caffettiera.CSharp.Common;
        using Caffettiera.CSharp.BLL;
        
        
        namespace GenTest.BOAM
        {
        
        internal interface IBellaFatturaExt
		{
			
		}
		
public partial  class BellaFattura : Fattura
        {
        
			private int? uid;
            
            #region Constructors
            
            public BellaFattura()
            {
				uid = null;
            }
            
            protected internal BellaFattura(int uid)
            {
				this.uid = uid;
            }
            
            #endregion

            public static new BellaFattura Create()
            {
                return new BellaFattura();
            }

            public override bool IsValid()
            {
                return base.IsValid() && true;
            }
            
            public override int? UId
            {
                get { return uid; }
            }
              
            public new void SetPropertyByName<T>(string name, T x)
            {
                this.GetType().GetProperty(name, typeof(T)).SetValue(this, x, null);
            }

            public new void SetPropertyByNameFromString(string name, string x)
            {
                Type[] tys = { typeof(string) };
                object[] args = { x };
                var p = this.GetType().GetProperty(name);
                try
                {
                    p.SetValue(this, p.PropertyType.GetConstructor(tys).Invoke(args), null);
                }
                catch (System.ArgumentException e)
                {
                    throw new UnexpectedException(string.Format("type '{0}' does not provide a constructor from 'string'", p.PropertyType), e);
                }
            }

            public new T GetPropertyByName<T>(string name)
            {
                return (T)this.GetType().GetProperty(name, typeof(T)).GetValue(this, null);
            }                      
        
            private int _Colore;
        
        public int Colore
        {
            get { return _Colore; }
            set { _Colore = value; }
        }
        
        }
        
        
        }
        
