//
        // BLL/BOM [C#]
        // Business Object RigaFattura
        //
        // Generated by MGen/Caffettiera
        // (C) 2008 Netical 
        //
        
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using Caffettiera.CSharp.Common;
        using Caffettiera.CSharp.BLL;
        using Caffettiera.CSharp.BLL.BOM;
        
        
        namespace GenTest.BOM
        {
        
        internal interface IRigaFatturaExt
		{
			
		}
		
public partial  class RigaFattura :  IBO<Transaction>
        {
            protected internal  BO<GenTest.Entities.RigaFatturaKey, GenTest.Entities.RigaFattura, GenTest.Data.Bases.RigaFatturaProviderBase> bo;
        
            #region Constructors
            
            protected internal RigaFattura(int k) 
        {
            this.bo = new BO<GenTest.Entities.RigaFatturaKey,
                             GenTest.Entities.RigaFattura,
                             GenTest.Data.Bases.RigaFatturaProviderBase>
                             (new GenTest.Entities.RigaFatturaKey(k),
                             GenTest.Data.DataRepository.RigaFatturaProvider);
        }
        
        protected internal RigaFattura(GenTest.Entities.RigaFattura e) 
        {
            this.bo = new BO<GenTest.Entities.RigaFatturaKey,
                             GenTest.Entities.RigaFattura,
                             GenTest.Data.Bases.RigaFatturaProviderBase>
                             (e, GenTest.Data.DataRepository.RigaFatturaProvider);
        }

        public RigaFattura() 
        {
            this.bo = new BO<GenTest.Entities.RigaFatturaKey,
                             GenTest.Entities.RigaFattura,
                             GenTest.Data.Bases.RigaFatturaProviderBase>
                             (GenTest.Data.DataRepository.RigaFatturaProvider);
        }
        
        public RigaFattura(Env<Transaction> env) : this()
        {
            env.Add(this);
        }
        
            
            #endregion

			public static implicit operator GenTest.BOAM.RigaFattura(RigaFattura x)
			{
				var r = new GenTest.BOAM.RigaFattura(x.UId);
				r.Descrizione = x.Descrizione;
r.Importo = x.Importo;
				return r;
			}

			public static implicit operator RigaFattura(GenTest.BOAM.RigaFattura x)
			{
			    var r = x.UId.HasValue ? new RigaFattura(x.UId.Value) : new RigaFattura();
			    r.Descrizione = x.Descrizione;
r.Importo = x.Importo;
				return r;
			}
        
            public static  RigaFattura Create()
            {
                return new RigaFattura();
            }

            public static  RigaFattura RetrieveByUId(int k)
            {
                var r = new RigaFattura(k);
                return r.bo.entity == null ? null : r;
            }
            
            public static  IList<RigaFattura> RetrieveAll()
            {
                return BO<GenTest.Entities.RigaFatturaKey,
                          GenTest.Entities.RigaFattura,
                          GenTest.Data.Bases.RigaFatturaProviderBase>.RetrieveAll<RigaFattura>
                            ((e) => new RigaFattura(e),
                            (bo) => true,
                            GenTest.Data.DataRepository.RigaFatturaProvider);
            }
            
            public static  IList<RigaFattura> RetrieveAll(Func<RigaFattura, bool> p)
            {
                return BO<GenTest.Entities.RigaFatturaKey,
                          GenTest.Entities.RigaFattura,
                          GenTest.Data.Bases.RigaFatturaProviderBase>.RetrieveAll<RigaFattura>
                            ((e) => new RigaFattura(e),
                            p,
                            GenTest.Data.DataRepository.RigaFatturaProvider);
            }

            public virtual bool IsValid()
            {
                return true;
            }
            
            public virtual int UId
            {
                get { return bo.entity.ID; }
            }
            
            public virtual void Commit(Transaction tr0)
			{
				tr0.Do(RecCommit);
			}

			public virtual void Commit()
			{
				new Transaction().Do(RecCommit);
			}
            
            public virtual void Remove()
            {
                bo.MarkToRemove();
            }
                     
            public  void SetPropertyByName<T>(string name, T x)
            {
                bo.SetPropertyByName<T>(name, x);
            }

            public  void SetPropertyByNameFromString(string name, string x)
            {
                bo.SetPropertyByNameFromString(name, x);
            }

            public  T GetPropertyByName<T>(string name)
            {
                return bo.GetPropertyByName<T>(name);
            }
        
            public char Descrizione
        {
            get { return bo.entity.Descrizione; }
            set { bo.entity.Descrizione = value; }
        }
        
public double Importo
        {
            get { return bo.entity.Importo; }
            set { bo.entity.Importo = value; }
        }
        protected internal virtual void RecCommit(Transaction t)
            {
                bo.Committing(() =>
                    {
                        bo.Save(t);
        if (_AggregationFattura != null)
        {
			_AggregationFattura.ReallyRemove((x) =>
                {
                    x._AggregatedRigaFattura = this;
                    x.RecCommit(t);
                    return x.bo.Status == Status.ToBeRemoved;
                });
        }
        
                    });
            }
            #region Fattura-to-RigaFattura Aggregation
        
        protected internal Aggregation<Fattura, Transaction> _AggregationFattura = null;

        public ICollection<Fattura> AggregationFattura
        {
            get
            {
                if (_AggregationFattura == null)
                    _AggregationFattura = CollectionMapper<Aggregation<Fattura, Transaction>, Fattura>.map<GenTest.Entities.Fattura>
                            (GenTest.Data.DataRepository.FatturaProvider.GetByAggregatedRigaFatturaID(bo.entity.ID),
                            (e) => new Fattura(e),
                            () => new Aggregation<Fattura, Transaction>((Fattura x) => { x._AggregatedRigaFattura = this; return x; }));
                return _AggregationFattura;
            }
        }
        
        
        #endregion
        
        }
        
        
        }
        
