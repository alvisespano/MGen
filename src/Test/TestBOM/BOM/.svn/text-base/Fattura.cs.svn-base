//
        // BLL/BOM [C#]
        // Business Object Fattura
        //
        // Generated by MGen/Caffettiera
        // (C) 2008 Netical 
        //
        
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using Caffettiera.CSharp.Common;
        using Caffettiera.CSharp.BLL;
        using Caffettiera.CSharp.BLL.BOM;
        
        
        namespace GenTest.BOM
        {
        
        internal interface IFatturaExt
		{
			void M1(ICollection<string> a);
void M2(GenTest.BOM.Fattura a);
		}
		
public partial  class Fattura :  IBO<Transaction>
        {
            protected internal  BO<GenTest.Entities.FatturaKey, GenTest.Entities.Fattura, GenTest.Data.Bases.FatturaProviderBase> bo;
        
            #region Constructors
            
            protected internal Fattura(int k) 
        {
            this.bo = new BO<GenTest.Entities.FatturaKey,
                             GenTest.Entities.Fattura,
                             GenTest.Data.Bases.FatturaProviderBase>
                             (new GenTest.Entities.FatturaKey(k),
                             GenTest.Data.DataRepository.FatturaProvider);
        }
        
        protected internal Fattura(GenTest.Entities.Fattura e) 
        {
            this.bo = new BO<GenTest.Entities.FatturaKey,
                             GenTest.Entities.Fattura,
                             GenTest.Data.Bases.FatturaProviderBase>
                             (e, GenTest.Data.DataRepository.FatturaProvider);
        }

        public Fattura() 
        {
            this.bo = new BO<GenTest.Entities.FatturaKey,
                             GenTest.Entities.Fattura,
                             GenTest.Data.Bases.FatturaProviderBase>
                             (GenTest.Data.DataRepository.FatturaProvider);
        }
        
        public Fattura(Env<Transaction> env) : this()
        {
            env.Add(this);
        }
        
            
            #endregion

			public static implicit operator GenTest.BOAM.Fattura(Fattura x)
			{
				var r = new GenTest.BOAM.Fattura(x.UId);
				r.Intestatario = x.Intestatario;
r.Descrizione = x.Descrizione;
r.Data = x.Data;
r.Numero = x.Numero;
				return r;
			}

			public static implicit operator Fattura(GenTest.BOAM.Fattura x)
			{
			    var r = x.UId.HasValue ? new Fattura(x.UId.Value) : new Fattura();
			    r.Intestatario = x.Intestatario;
r.Descrizione = x.Descrizione;
r.Data = x.Data;
r.Numero = x.Numero;
				return r;
			}
        
            public static  Fattura Create()
            {
                return new Fattura();
            }

            public static  Fattura RetrieveByUId(int k)
            {
                var r = new Fattura(k);
                return r.bo.entity == null ? null : r;
            }
            
            public static  IList<Fattura> RetrieveAll()
            {
                return BO<GenTest.Entities.FatturaKey,
                          GenTest.Entities.Fattura,
                          GenTest.Data.Bases.FatturaProviderBase>.RetrieveAll<Fattura>
                            ((e) => new Fattura(e),
                            (bo) => true,
                            GenTest.Data.DataRepository.FatturaProvider);
            }
            
            public static  IList<Fattura> RetrieveAll(Func<Fattura, bool> p)
            {
                return BO<GenTest.Entities.FatturaKey,
                          GenTest.Entities.Fattura,
                          GenTest.Data.Bases.FatturaProviderBase>.RetrieveAll<Fattura>
                            ((e) => new Fattura(e),
                            p,
                            GenTest.Data.DataRepository.FatturaProvider);
            }

            public virtual bool IsValid()
            {
                return true;
            }
            
            public virtual int UId
            {
                get { return bo.entity.ID; }
            }
            
            public virtual void Commit(Transaction tr0)
			{
				tr0.Do(RecCommit);
			}

			public virtual void Commit()
			{
				new Transaction().Do(RecCommit);
			}
            
            public virtual void Remove()
            {
                bo.MarkToRemove();
            }
                     
            public  void SetPropertyByName<T>(string name, T x)
            {
                bo.SetPropertyByName<T>(name, x);
            }

            public  void SetPropertyByNameFromString(string name, string x)
            {
                bo.SetPropertyByNameFromString(name, x);
            }

            public  T GetPropertyByName<T>(string name)
            {
                return bo.GetPropertyByName<T>(name);
            }
        
            public string Intestatario
        {
            get { return bo.entity.Intestatario; }
            set { bo.entity.Intestatario = value; }
        }
        
public DateTime Descrizione
        {
            get { return bo.entity.Descrizione; }
            set { bo.entity.Descrizione = value; }
        }
        
public string Data
        {
            get { return bo.entity.Data; }
            set { bo.entity.Data = value; }
        }
        
public int Numero
        {
            get { return bo.entity.Numero; }
            set { bo.entity.Numero = value; }
        }
        protected internal virtual void RecCommit(Transaction t)
            {
                bo.Committing(() =>
                    {
                        if (_AggregatedRigaFattura != null)
        {
            _AggregatedRigaFattura.RecCommit(t);
            if (_AggregatedRigaFattura.bo.Status == Status.Removed)
            {
				_AggregatedRigaFattura = null;
				bo.entity.AggregatedRigaFatturaID = null;
			}
            else bo.entity.AggregatedRigaFatturaID = _AggregatedRigaFattura.bo.entity.ID;
        }
        bo.Save(t);
        
                    });
            }
            #region Fattura-to-RigaFattura Aggregation
        
        protected internal RigaFattura _AggregatedRigaFattura = null;

		public bool HasAggregatedRigaFattura
		{
			get { return _AggregatedRigaFattura != null || bo.entity.AggregatedRigaFatturaID.HasValue; }
		}

		public void UnlinkAggregatedRigaFattura()
		{
			bo.entity.AggregatedRigaFatturaID = null;
			if (_AggregatedRigaFattura != null)
			{
				_AggregatedRigaFattura._AggregationFattura.ReallyRemove(this);
				_AggregatedRigaFattura = null;
			}			
        }
        
        public RigaFattura AggregatedRigaFattura
        {
            get
            {
                if (_AggregatedRigaFattura == null)
                {
                    int? id = bo.entity.AggregatedRigaFatturaID;
                    if (id.HasValue)
                    {
                        _AggregatedRigaFattura = new RigaFattura(id.Value);
                    }
                    else
                    {
                        _AggregatedRigaFattura = new RigaFattura();
                        _AggregatedRigaFattura.AggregationFattura.Add(this);
                    }
                }
                return _AggregatedRigaFattura;
            }
		}
        
        
        #endregion
        
        }
        
        
        }
        
