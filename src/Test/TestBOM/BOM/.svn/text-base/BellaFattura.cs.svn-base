//
        // BLL/BOM [C#]
        // Business Object BellaFattura
        //
        // Generated by MGen/Caffettiera
        // (C) 2008 Netical 
        //
        
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using Caffettiera.CSharp.Common;
        using Caffettiera.CSharp.BLL;
        using Caffettiera.CSharp.BLL.BOM;
        
        
        namespace GenTest.BOM
        {
        
        internal interface IBellaFatturaExt
		{
			void M2(GenTest.BOM.Fattura a);
		}
		
public partial  class BellaFattura : Fattura, IBO<Transaction>
        {
            protected internal new BO<GenTest.Entities.BellaFatturaKey, GenTest.Entities.BellaFattura, GenTest.Data.Bases.BellaFatturaProviderBase> bo;
        
            #region Constructors
            
            protected internal BellaFattura(int k) : base(k)
        {
            this.bo = new BO<GenTest.Entities.BellaFatturaKey,
                             GenTest.Entities.BellaFattura,
                             GenTest.Data.Bases.BellaFatturaProviderBase>
                             (new GenTest.Entities.BellaFatturaKey(k),
                             GenTest.Data.DataRepository.BellaFatturaProvider);
        }
        
        protected internal BellaFattura(GenTest.Entities.BellaFattura e) : base(e.ID)
        {
            this.bo = new BO<GenTest.Entities.BellaFatturaKey,
                             GenTest.Entities.BellaFattura,
                             GenTest.Data.Bases.BellaFatturaProviderBase>
                             (e, GenTest.Data.DataRepository.BellaFatturaProvider);
        }

        public BellaFattura() : base()
        {
            this.bo = new BO<GenTest.Entities.BellaFatturaKey,
                             GenTest.Entities.BellaFattura,
                             GenTest.Data.Bases.BellaFatturaProviderBase>
                             (GenTest.Data.DataRepository.BellaFatturaProvider);
        }
        
        public BellaFattura(Env<Transaction> env) : this()
        {
            env.Add(this);
        }
        
            
            #endregion

			public static implicit operator GenTest.BOAM.BellaFattura(BellaFattura x)
			{
				var r = new GenTest.BOAM.BellaFattura(x.UId);
				r.Colore = x.Colore;
				return r;
			}

			public static implicit operator BellaFattura(GenTest.BOAM.BellaFattura x)
			{
			    var r = x.UId.HasValue ? new BellaFattura(x.UId.Value) : new BellaFattura();
			    r.Colore = x.Colore;
				return r;
			}
        
            public static new BellaFattura Create()
            {
                return new BellaFattura();
            }

            public static new BellaFattura RetrieveByUId(int k)
            {
                var r = new BellaFattura(k);
                return r.bo.entity == null ? null : r;
            }
            
            public static new IList<BellaFattura> RetrieveAll()
            {
                return BO<GenTest.Entities.BellaFatturaKey,
                          GenTest.Entities.BellaFattura,
                          GenTest.Data.Bases.BellaFatturaProviderBase>.RetrieveAll<BellaFattura>
                            ((e) => new BellaFattura(e),
                            (bo) => true,
                            GenTest.Data.DataRepository.BellaFatturaProvider);
            }
            
            public static new IList<BellaFattura> RetrieveAll(Func<BellaFattura, bool> p)
            {
                return BO<GenTest.Entities.BellaFatturaKey,
                          GenTest.Entities.BellaFattura,
                          GenTest.Data.Bases.BellaFatturaProviderBase>.RetrieveAll<BellaFattura>
                            ((e) => new BellaFattura(e),
                            p,
                            GenTest.Data.DataRepository.BellaFatturaProvider);
            }

            public override bool IsValid()
            {
                return base.IsValid() && true;
            }
            
            public override int UId
            {
                get { return bo.entity.ID; }
            }
            
            public virtual void Commit(Transaction tr0)
			{
				tr0.Do(RecCommit);
			}

			public virtual void Commit()
			{
				new Transaction().Do(RecCommit);
			}
            
            public override void Remove()
            {
                bo.MarkToRemove();
            }
                     
            public new void SetPropertyByName<T>(string name, T x)
            {
                bo.SetPropertyByName<T>(name, x);
            }

            public new void SetPropertyByNameFromString(string name, string x)
            {
                bo.SetPropertyByNameFromString(name, x);
            }

            public new T GetPropertyByName<T>(string name)
            {
                return bo.GetPropertyByName<T>(name);
            }
        
            public int Colore
        {
            get { return bo.entity.Colore; }
            set { bo.entity.Colore = value; }
        }
        protected internal override void RecCommit(Transaction t)
            {
                bo.Committing(() =>
                    {
                        base.RecCommit(t);
         bo.entity.ID = base.bo.entity.ID;
         bo.Save(t);
        
                    });
            }
            
        }
        
        
        }
        
