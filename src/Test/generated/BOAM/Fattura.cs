//
        // BLL/BOAM [C#]
        // Business Object Avatar Fattura
        //
        // Generated by MGen/Caffettiera
        // (C) 2008 Netical 
        //
        
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using Caffettiera.CSharp.Common;
        using Caffettiera.CSharp.BLL;
        
        
        namespace GenTest.BOAM
        {
        
        internal interface IFatturaExt
		{
			void M1(ICollection<string> a);
		}
		
public partial  class Fattura 
        {
        
			private int? uid;
            
            #region Constructors
            
            public Fattura()
            {
				uid = null;
            }
            
            protected internal Fattura(int uid)
            {
				if (uid == 0) this.uid = null;
				else this.uid = uid;
            }
            
            #endregion

            public static  Fattura Create()
            {
                return new Fattura();
            }

            public virtual bool IsValid()
            {
                return true;
            }
            
            public virtual int? UId
            {
                get { return uid; }
            }
              
            public  void SetPropertyByName<T>(string name, T x)
            {
                this.GetType().GetProperty(name, typeof(T)).SetValue(this, x, null);
            }

            public  void SetPropertyByNameFromString(string name, string x)
            {
                Type[] tys = { typeof(string) };
                object[] args = { x };
                var p = this.GetType().GetProperty(name);
                try
                {
                    p.SetValue(this, p.PropertyType.GetConstructor(tys).Invoke(args), null);
                }
                catch (System.ArgumentException e)
                {
                    throw new UnexpectedException(string.Format("type '{0}' does not provide a constructor from 'string'", p.PropertyType), e);
                }
            }

            public  T GetPropertyByName<T>(string name)
            {
                return (T)this.GetType().GetProperty(name, typeof(T)).GetValue(this, null);
            }                      
        
            private string _Intestatario;
        
        public string Intestatario
        {
            get { return _Intestatario; }
            set { _Intestatario = value; }
        }
        
private DateTime _Descrizione;
        
        public DateTime Descrizione
        {
            get { return _Descrizione; }
            set { _Descrizione = value; }
        }
        
private string _Data;
        
        public string Data
        {
            get { return _Data; }
            set { _Data = value; }
        }
        
private int _Numero;
        
        public int Numero
        {
            get { return _Numero; }
            set { _Numero = value; }
        }
        #region Fattura-to-RigaFattura Aggregation
        
        protected internal RigaFattura _AggregatedRigaFattura = null;

        public RigaFattura AggregatedRigaFattura
        {
            get { return _AggregatedRigaFattura; }
            
            set
            {
				if (_AggregatedRigaFattura != null && _AggregatedRigaFattura._AggregationFattura != null && _AggregatedRigaFattura != value)
					_AggregatedRigaFattura._AggregationFattura.RemoveAll((bo) => bo == this);
				_AggregatedRigaFattura = value;
				if (value != null && value._AggregationFattura != null && !value._AggregationFattura.Exists((bo) => bo == this))
					value._AggregationFattura.Add(this);
			}				
        }
        
        
        #endregion
        
        }
        
        
        }
        
