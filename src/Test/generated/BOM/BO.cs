//
        // BLL/BOM [C#]
        // Generic Utils for Business Objects
        //
        // Generated by MGen/Caffettiera
        // (C) 2008 Netical 
        //
        
        using System;
        using System.Collections;
        using System.Collections.Generic;
        using Caffettiera.CSharp.Common;
        using Caffettiera.CSharp.BLL;
        using Caffettiera.CSharp.BLL.BOM;
        
        
        namespace GenTest.BOM
        {
        
        /// <summary>
		/// Transaction type representing a transactional instance for committing business objects.
		/// This class auto-implements the ITransaction interface by F-binding itself to the type
		/// parameter, thus not losing type informations on its own type.
		/// </summary>
		public class Transaction : ITransaction<Transaction>
		{
			protected GenTest.Data.TransactionManager tm;

			public Transaction()
			{
				tm = new GenTest.Data.TransactionManager(GenTest.Data.DataRepository.ConnectionStrings["GenTest.Data.ConnectionString"].ConnectionString);
			}
            			
			public R Do<R>(Func<Transaction, R> f)
			{
				tm.BeginTransaction();
				try
				{
					R r = f(this);
					tm.Commit();
					return r;
				}
				catch (Exception e)
				{
					tm.Rollback();
					throw e;
				}
			}

			public void Do(Action<Transaction> f)
			{
				Do<object>((t) => { f(t); return null; });
			}

			protected internal GenTest.Data.TransactionManager transactionManager
	        {
		        get { return tm; }
			}
		}
		
/// <summary>
		/// Status of a business objects can be one of these.
		/// </summary>
		public enum Status { Valid, ToBeRemoved, Removed }
        
        /// <summary>
	    /// Business object wrapper supporting NetTiers Entity-Provider pattern. Used internally by generated BOs.
	    /// </summary>
	    /// <typeparam name="Key">NetTiers EntityKey type.</typeparam>
	    /// <typeparam name="Entity">NetTiers Entity type.</typeparam>
	    /// <typeparam name="ProviderBase">NetTiers Provider type.</typeparam>
        public class BO<Key, Entity, ProviderBase>
            where Key : GenTest.Entities.IEntityKey, new()
            where Entity : GenTest.Entities.IEntityId<Key>, new()
            where ProviderBase : GenTest.Data.Bases.EntityProviderBase<Entity, Key>
        {
            protected internal Entity entity;
            protected internal ProviderBase providerBase;
            protected bool committing;
            protected Status status;

            protected internal BO(Entity e, ProviderBase p)
            {
                entity = e;
                providerBase = p;
                status = Status.Valid;
            }

            protected internal BO(ProviderBase p) : this(new Entity(), p) {}

            protected internal BO(Key k, ProviderBase p) : this(p.Get(k), p) {}

            public void Save(Transaction t)
            {
                switch (status)
                {
                    case Status.Valid:
                        providerBase.Save(t.transactionManager, entity);
                        break;

                    case Status.ToBeRemoved:
                        providerBase.Delete(t.transactionManager, entity);
                        status = Status.Removed;
                        break;

                    case Status.Removed:
                        throw new InvalidOperationException(string.Format("business object '{0}' has been removed", GetType().Name));
                }
            }

            public void MarkToRemove()
            {
                entity.MarkToDelete();
                status = Status.ToBeRemoved;
            }

            public Status Status
            {
                get { return status; }
            }

            public void Committing(Action f)
            {
                if(status == Status.Removed)
                    throw new InvalidOperationException(string.Format("business object '{0}' has been removed", GetType().Name));
                if (committing) return;
                else
                {
                    committing = true;
                    try { f(); }
                    finally { committing = false; }
                }
            }

            public static IList<BO> RetrieveAll<BO>(Func<Entity, BO> f, Func<BO, bool> pf, ProviderBase p)
            {
                IList<BO> r = new List<BO>();
                foreach (Entity e in p.GetAll())
                {
                    var bo = f(e);
                    if(pf(bo)) r.Add(bo);
                }
                return r;
            }

            public void SetPropertyByName<T>(string name, T x)
            {
                this.GetType().GetProperty(name, typeof(T)).SetValue(this, x, null);
            }

            public void SetPropertyByNameFromString(string name, string x)
            {
                Type[] tys = { typeof(string) };
                object[] args = { x };
                var p = this.GetType().GetProperty(name);
                try
                {
                    p.SetValue(this, p.PropertyType.GetConstructor(tys).Invoke(args), null);
                }
                catch (System.ArgumentException e)
                {
                    throw new UnexpectedException(string.Format("type '{0}' does not provide a constructor from 'string'", p.PropertyType), e);
                }
            }

            public T GetPropertyByName<T>(string name)
            {
                return (T)this.GetType().GetProperty(name, typeof(T)).GetValue(this, null);
            }
        }
        
        
        }
        
