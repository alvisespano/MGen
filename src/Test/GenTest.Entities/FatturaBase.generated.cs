
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Fattura.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace GenTest.Entities
{
	///<summary>
	/// An object representation of the 'Fattura' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class FatturaBase : EntityBase, GenTest.Entities.IFattura, IEntityId<FatturaKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FatturaEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FatturaEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FatturaEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Fattura> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event FatturaEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FatturaEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FatturaBase"/> instance.
		///</summary>
		public FatturaBase()
		{
			this.entityData = new FatturaEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FatturaBase"/> instance.
		///</summary>
		///<param name="intestatario"></param>
		///<param name="descrizione"></param>
		///<param name="data"></param>
		///<param name="numero"></param>
		///<param name="composedRigaFatturaID"></param>
		///<param name="aggregatedRigaFatturaID"></param>
		///<param name="associatedRigaFatturaID"></param>
		public FatturaBase(System.String intestatario, System.String descrizione, System.String data, 
			System.Int32 numero, System.Int32? composedRigaFatturaID, System.Int32? aggregatedRigaFatturaID, 
			System.Int32? associatedRigaFatturaID)
		{
			this.entityData = new FatturaEntityData();
			this.backupData = null;

			this.Intestatario = intestatario;
			this.Descrizione = descrizione;
			this.Data = data;
			this.Numero = numero;
			this.ComposedRigaFatturaID = composedRigaFatturaID;
			this.AggregatedRigaFatturaID = aggregatedRigaFatturaID;
			this.AssociatedRigaFatturaID = associatedRigaFatturaID;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Fattura"/> instance.
		///</summary>
		///<param name="intestatario"></param>
		///<param name="descrizione"></param>
		///<param name="data"></param>
		///<param name="numero"></param>
		///<param name="composedRigaFatturaID"></param>
		///<param name="aggregatedRigaFatturaID"></param>
		///<param name="associatedRigaFatturaID"></param>
		public static Fattura CreateFattura(System.String intestatario, System.String descrizione, System.String data, 
			System.Int32 numero, System.Int32? composedRigaFatturaID, System.Int32? aggregatedRigaFatturaID, 
			System.Int32? associatedRigaFatturaID)
		{
			Fattura newFattura = new Fattura();
			newFattura.Intestatario = intestatario;
			newFattura.Descrizione = descrizione;
			newFattura.Data = data;
			newFattura.Numero = numero;
			newFattura.ComposedRigaFatturaID = composedRigaFatturaID;
			newFattura.AggregatedRigaFatturaID = aggregatedRigaFatturaID;
			newFattura.AssociatedRigaFatturaID = associatedRigaFatturaID;
			return newFattura;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Intestatario property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Intestatario
		{
			get
			{
				return this.entityData.Intestatario; 
			}
			
			set
			{
				if (this.entityData.Intestatario == value)
					return;
					
				OnColumnChanging(FatturaColumn.Intestatario, this.entityData.Intestatario);
				this.entityData.Intestatario = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FatturaColumn.Intestatario, this.entityData.Intestatario);
				OnPropertyChanged("Intestatario");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Descrizione property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public override System.String Descrizione
		{
			get
			{
				return this.entityData.Descrizione; 
			}
			
			set
			{
				if (this.entityData.Descrizione == value)
					return;
					
				OnColumnChanging(FatturaColumn.Descrizione, this.entityData.Descrizione);
				this.entityData.Descrizione = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FatturaColumn.Descrizione, this.entityData.Descrizione);
				OnPropertyChanged("Descrizione");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Data property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Data
		{
			get
			{
				return this.entityData.Data; 
			}
			
			set
			{
				if (this.entityData.Data == value)
					return;
					
				OnColumnChanging(FatturaColumn.Data, this.entityData.Data);
				this.entityData.Data = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FatturaColumn.Data, this.entityData.Data);
				OnPropertyChanged("Data");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Numero property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Numero
		{
			get
			{
				return this.entityData.Numero; 
			}
			
			set
			{
				if (this.entityData.Numero == value)
					return;
					
				OnColumnChanging(FatturaColumn.Numero, this.entityData.Numero);
				this.entityData.Numero = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FatturaColumn.Numero, this.entityData.Numero);
				OnPropertyChanged("Numero");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public override System.Int32 ID
		{
			get
			{
				return this.entityData.ID; 
			}
			
			set
			{
				if (this.entityData.ID == value)
					return;
					
				OnColumnChanging(FatturaColumn.ID, this.entityData.ID);
				this.entityData.ID = value;
				this.EntityId.ID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FatturaColumn.ID, this.entityData.ID);
				OnPropertyChanged("ID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ComposedRigaFatturaID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsComposedRigaFatturaIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ComposedRigaFatturaID
		{
			get
			{
				return this.entityData.ComposedRigaFatturaID; 
			}
			
			set
			{
				if (this.entityData.ComposedRigaFatturaID == value)
					return;
					
				OnColumnChanging(FatturaColumn.ComposedRigaFatturaID, this.entityData.ComposedRigaFatturaID);
				this.entityData.ComposedRigaFatturaID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FatturaColumn.ComposedRigaFatturaID, this.entityData.ComposedRigaFatturaID);
				OnPropertyChanged("ComposedRigaFatturaID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AggregatedRigaFatturaID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAggregatedRigaFatturaIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AggregatedRigaFatturaID
		{
			get
			{
				return this.entityData.AggregatedRigaFatturaID; 
			}
			
			set
			{
				if (this.entityData.AggregatedRigaFatturaID == value)
					return;
					
				OnColumnChanging(FatturaColumn.AggregatedRigaFatturaID, this.entityData.AggregatedRigaFatturaID);
				this.entityData.AggregatedRigaFatturaID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FatturaColumn.AggregatedRigaFatturaID, this.entityData.AggregatedRigaFatturaID);
				OnPropertyChanged("AggregatedRigaFatturaID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AssociatedRigaFatturaID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAssociatedRigaFatturaIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AssociatedRigaFatturaID
		{
			get
			{
				return this.entityData.AssociatedRigaFatturaID; 
			}
			
			set
			{
				if (this.entityData.AssociatedRigaFatturaID == value)
					return;
					
				OnColumnChanging(FatturaColumn.AssociatedRigaFatturaID, this.entityData.AssociatedRigaFatturaID);
				this.entityData.AssociatedRigaFatturaID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FatturaColumn.AssociatedRigaFatturaID, this.entityData.AssociatedRigaFatturaID);
				OnPropertyChanged("AssociatedRigaFatturaID");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="RigaFattura"/>.
		/// </summary>
		/// <value>The source RigaFattura for ComposedRigaFatturaID.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual RigaFattura ComposedRigaFatturaIDSource
      	{
            get { return entityData.ComposedRigaFatturaIDSource; }
            set { entityData.ComposedRigaFatturaIDSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="RigaFattura"/>.
		/// </summary>
		/// <value>The source RigaFattura for AggregatedRigaFatturaID.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual RigaFattura AggregatedRigaFatturaIDSource
      	{
            get { return entityData.AggregatedRigaFatturaIDSource; }
            set { entityData.AggregatedRigaFatturaIDSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="RigaFattura"/>.
		/// </summary>
		/// <value>The source RigaFattura for AssociatedRigaFatturaID.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual RigaFattura AssociatedRigaFatturaIDSource
      	{
            get { return entityData.AssociatedRigaFatturaIDSource; }
            set { entityData.AssociatedRigaFatturaIDSource = value; }
      	}
		#endregion
		
		#region Children Collections

		/// <summary>
		///	Holds a RigaFattura object
		///	which is related to this object through the relation RigaFattura
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual RigaFattura RigaFattura
		{
			get { return entityData.RigaFattura; }
			set { entityData.RigaFattura = value; }	
		}
	
		/// <summary>
		///	Holds a collection of RigaFattura objects
		///	which are related to this object through the relation FK_Composed_RigaFattura_Fattura
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<RigaFattura> RigaFatturaCollectionGetByComposedFatturaID
		{
			get { return entityData.RigaFatturaCollectionGetByComposedFatturaID; }
			set { entityData.RigaFatturaCollectionGetByComposedFatturaID = value; }	
		}
	
		/// <summary>
		///	Holds a collection of RigaFattura objects
		///	which are related to this object through the relation FK_Aggregated_RigaFattura_Fattura
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<RigaFattura> RigaFatturaCollectionGetByAggregatedFatturaID
		{
			get { return entityData.RigaFatturaCollectionGetByAggregatedFatturaID; }
			set { entityData.RigaFatturaCollectionGetByAggregatedFatturaID = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("Intestatario", "Intestatario"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Intestatario", "Intestatario", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("Descrizione", "Descrizione"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Descrizione", "Descrizione", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("Data", "Data"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Data", "Data", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Fattura"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Intestatario", "Descrizione", "Data", "Numero", "ID", "ComposedRigaFatturaID", "AggregatedRigaFatturaID", "AssociatedRigaFatturaID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FatturaEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Fattura) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Fattura>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Fattura);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Fattura Entity 
		///</summary>
		public virtual Fattura Copy()
		{
			//shallow copy entity
			Fattura copy = new Fattura();
			copy.SuppressEntityEvents = true;
			copy.Intestatario = this.Intestatario;
			copy.Descrizione = this.Descrizione;
			copy.Data = this.Data;
			copy.Numero = this.Numero;
			copy.ID = this.ID;
			copy.ComposedRigaFatturaID = this.ComposedRigaFatturaID;
			copy.AggregatedRigaFatturaID = this.AggregatedRigaFatturaID;
			copy.AssociatedRigaFatturaID = this.AssociatedRigaFatturaID;
			
			copy.ComposedRigaFatturaIDSource = MakeCopyOf(this.ComposedRigaFatturaIDSource) as RigaFattura;
			copy.AggregatedRigaFatturaIDSource = MakeCopyOf(this.AggregatedRigaFatturaIDSource) as RigaFattura;
			copy.AssociatedRigaFatturaIDSource = MakeCopyOf(this.AssociatedRigaFatturaIDSource) as RigaFattura;
		
			//deep copy nested objects
			copy.RigaFattura = (RigaFattura) MakeCopyOf(this.RigaFattura); 
			copy.RigaFatturaCollectionGetByComposedFatturaID = (TList<RigaFattura>) MakeCopyOf(this.RigaFatturaCollectionGetByComposedFatturaID); 
			copy.RigaFatturaCollectionGetByAggregatedFatturaID = (TList<RigaFattura>) MakeCopyOf(this.RigaFatturaCollectionGetByAggregatedFatturaID); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Fattura Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Fattura DeepCopy()
		{
			return EntityHelper.Clone<Fattura>(this as Fattura);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FatturaEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FatturaEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FatturaColumn column)
		{
			switch(column)
			{
					case FatturaColumn.Intestatario:
					return entityData.Intestatario != _originalData.Intestatario;
					case FatturaColumn.Descrizione:
					return entityData.Descrizione != _originalData.Descrizione;
					case FatturaColumn.Data:
					return entityData.Data != _originalData.Data;
					case FatturaColumn.Numero:
					return entityData.Numero != _originalData.Numero;
					case FatturaColumn.ID:
					return entityData.ID != _originalData.ID;
					case FatturaColumn.ComposedRigaFatturaID:
					return entityData.ComposedRigaFatturaID != _originalData.ComposedRigaFatturaID;
					case FatturaColumn.AggregatedRigaFatturaID:
					return entityData.AggregatedRigaFatturaID != _originalData.AggregatedRigaFatturaID;
					case FatturaColumn.AssociatedRigaFatturaID:
					return entityData.AssociatedRigaFatturaID != _originalData.AssociatedRigaFatturaID;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Intestatario != _originalData.Intestatario;
			result = result || entityData.Descrizione != _originalData.Descrizione;
			result = result || entityData.Data != _originalData.Data;
			result = result || entityData.Numero != _originalData.Numero;
			result = result || entityData.ID != _originalData.ID;
			result = result || entityData.ComposedRigaFatturaID != _originalData.ComposedRigaFatturaID;
			result = result || entityData.AggregatedRigaFatturaID != _originalData.AggregatedRigaFatturaID;
			result = result || entityData.AssociatedRigaFatturaID != _originalData.AssociatedRigaFatturaID;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FatturaBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is FatturaBase)
				return Equals(this, (FatturaBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FatturaBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Intestatario.GetHashCode() ^ 
					this.Descrizione.GetHashCode() ^ 
					this.Data.GetHashCode() ^ 
					this.Numero.GetHashCode() ^ 
					this.ID.GetHashCode() ^ 
					((this.ComposedRigaFatturaID == null) ? string.Empty : this.ComposedRigaFatturaID.ToString()).GetHashCode() ^ 
					((this.AggregatedRigaFatturaID == null) ? string.Empty : this.AggregatedRigaFatturaID.ToString()).GetHashCode() ^ 
					((this.AssociatedRigaFatturaID == null) ? string.Empty : this.AssociatedRigaFatturaID.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FatturaBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FatturaBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="FatturaBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="FatturaBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FatturaBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(FatturaBase Object1, FatturaBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Intestatario != Object2.Intestatario)
				equal = false;
			if (Object1.Descrizione != Object2.Descrizione)
				equal = false;
			if (Object1.Data != Object2.Data)
				equal = false;
			if (Object1.Numero != Object2.Numero)
				equal = false;
			if (Object1.ID != Object2.ID)
				equal = false;
			if ( Object1.ComposedRigaFatturaID != null && Object2.ComposedRigaFatturaID != null )
			{
				if (Object1.ComposedRigaFatturaID != Object2.ComposedRigaFatturaID)
					equal = false;
			}
			else if (Object1.ComposedRigaFatturaID == null ^ Object2.ComposedRigaFatturaID == null )
			{
				equal = false;
			}
			if ( Object1.AggregatedRigaFatturaID != null && Object2.AggregatedRigaFatturaID != null )
			{
				if (Object1.AggregatedRigaFatturaID != Object2.AggregatedRigaFatturaID)
					equal = false;
			}
			else if (Object1.AggregatedRigaFatturaID == null ^ Object2.AggregatedRigaFatturaID == null )
			{
				equal = false;
			}
			if ( Object1.AssociatedRigaFatturaID != null && Object2.AssociatedRigaFatturaID != null )
			{
				if (Object1.AssociatedRigaFatturaID != Object2.AssociatedRigaFatturaID)
					equal = false;
			}
			else if (Object1.AssociatedRigaFatturaID == null ^ Object2.AssociatedRigaFatturaID == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FatturaBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FatturaComparer GetComparer()
        {
            return new FatturaComparer();
        }
        */

        // Comparer delegates back to Fattura
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Fattura rhs, FatturaColumn which)
        {
            switch (which)
            {
            	
            	
            	case FatturaColumn.Intestatario:
            		return this.Intestatario.CompareTo(rhs.Intestatario);
            		
            		                 
            	
            	
            	case FatturaColumn.Descrizione:
            		return this.Descrizione.CompareTo(rhs.Descrizione);
            		
            		                 
            	
            	
            	case FatturaColumn.Data:
            		return this.Data.CompareTo(rhs.Data);
            		
            		                 
            	
            	
            	case FatturaColumn.Numero:
            		return this.Numero.CompareTo(rhs.Numero);
            		
            		                 
            	
            	
            	case FatturaColumn.ID:
            		return this.ID.CompareTo(rhs.ID);
            		
            		                 
            	
            	
            	case FatturaColumn.ComposedRigaFatturaID:
            		return this.ComposedRigaFatturaID.Value.CompareTo(rhs.ComposedRigaFatturaID.Value);
            		
            		                 
            	
            	
            	case FatturaColumn.AggregatedRigaFatturaID:
            		return this.AggregatedRigaFatturaID.Value.CompareTo(rhs.AggregatedRigaFatturaID.Value);
            		
            		                 
            	
            	
            	case FatturaColumn.AssociatedRigaFatturaID:
            		return this.AssociatedRigaFatturaID.Value.CompareTo(rhs.AssociatedRigaFatturaID.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FatturaKey> Members
		
		// member variable for the EntityId property
		private FatturaKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FatturaKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FatturaKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Fattura")
					.Append("|").Append( this.ID.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- Intestatario: {0}{8}- Descrizione: {1}{8}- Data: {2}{8}- Numero: {3}{8}- ID: {4}{8}- ComposedRigaFatturaID: {5}{8}- AggregatedRigaFatturaID: {6}{8}- AssociatedRigaFatturaID: {7}{8}", 
				this.Intestatario,
				this.Descrizione,
				this.Data,
				this.Numero,
				this.ID,
				(this.ComposedRigaFatturaID == null) ? string.Empty : this.ComposedRigaFatturaID.ToString(),
				(this.AggregatedRigaFatturaID == null) ? string.Empty : this.AggregatedRigaFatturaID.ToString(),
				(this.AssociatedRigaFatturaID == null) ? string.Empty : this.AssociatedRigaFatturaID.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Fattura' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FatturaEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Fattura"</remarks>
			public System.Int32 ID;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Intestatario : 
		/// </summary>
		public System.String		  Intestatario = string.Empty;
		
		/// <summary>
		/// Descrizione : 
		/// </summary>
		public System.String		  Descrizione = string.Empty;
		
		/// <summary>
		/// Data : 
		/// </summary>
		public System.String		  Data = string.Empty;
		
		/// <summary>
		/// Numero : 
		/// </summary>
		public System.Int32		  Numero = (int)0;
		
		/// <summary>
		/// ComposedRigaFatturaID : 
		/// </summary>
		public System.Int32?		  ComposedRigaFatturaID = null;
		
		/// <summary>
		/// AggregatedRigaFatturaID : 
		/// </summary>
		public System.Int32?		  AggregatedRigaFatturaID = null;
		
		/// <summary>
		/// AssociatedRigaFatturaID : 
		/// </summary>
		public System.Int32?		  AssociatedRigaFatturaID = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private RigaFattura _composedRigaFatturaIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="RigaFattura"/>.
		/// </summary>
		/// <value>The source RigaFattura for ComposedRigaFatturaID.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual RigaFattura ComposedRigaFatturaIDSource
      	{
            get { return this._composedRigaFatturaIDSource; }
            set { this._composedRigaFatturaIDSource = value; }
      	}
		private RigaFattura _aggregatedRigaFatturaIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="RigaFattura"/>.
		/// </summary>
		/// <value>The source RigaFattura for AggregatedRigaFatturaID.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual RigaFattura AggregatedRigaFatturaIDSource
      	{
            get { return this._aggregatedRigaFatturaIDSource; }
            set { this._aggregatedRigaFatturaIDSource = value; }
      	}
		private RigaFattura _associatedRigaFatturaIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="RigaFattura"/>.
		/// </summary>
		/// <value>The source RigaFattura for AssociatedRigaFatturaID.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual RigaFattura AssociatedRigaFatturaIDSource
      	{
            get { return this._associatedRigaFatturaIDSource; }
            set { this._associatedRigaFatturaIDSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region RigaFattura
		
		private RigaFattura rigaFatturaAssociatedFatturaID;
		
		/// <summary>
		///	Holds a  RigaFattura entity object
		///	which is related to this object through the relation rigaFatturaAssociatedFatturaID
		/// </summary>
		public RigaFattura RigaFattura
		{
			get {		return rigaFatturaAssociatedFatturaID;		}
			set { 	rigaFatturaAssociatedFatturaID = value; 	}
		}
		
		#endregion 

		#region RigaFatturaCollectionGetByComposedFatturaID
		
		private TList<RigaFattura> rigaFatturaAggregatedFatturaIDGetByComposedFatturaID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation rigaFatturaAggregatedFatturaIDGetByComposedFatturaID
		/// </summary>	
		public TList<RigaFattura> RigaFatturaCollectionGetByComposedFatturaID
		{
			get
			{
				if (rigaFatturaAggregatedFatturaIDGetByComposedFatturaID == null)
				{
				rigaFatturaAggregatedFatturaIDGetByComposedFatturaID = new TList<RigaFattura>();
				}
	
				return rigaFatturaAggregatedFatturaIDGetByComposedFatturaID;
			}
			set { rigaFatturaAggregatedFatturaIDGetByComposedFatturaID = value; }
		}
		
		#endregion

		#region RigaFatturaCollectionGetByAggregatedFatturaID
		
		private TList<RigaFattura> rigaFatturaAggregatedFatturaIDGetByAggregatedFatturaID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation rigaFatturaAggregatedFatturaIDGetByAggregatedFatturaID
		/// </summary>	
		public TList<RigaFattura> RigaFatturaCollectionGetByAggregatedFatturaID
		{
			get
			{
				if (rigaFatturaAggregatedFatturaIDGetByAggregatedFatturaID == null)
				{
				rigaFatturaAggregatedFatturaIDGetByAggregatedFatturaID = new TList<RigaFattura>();
				}
	
				return rigaFatturaAggregatedFatturaIDGetByAggregatedFatturaID;
			}
			set { rigaFatturaAggregatedFatturaIDGetByAggregatedFatturaID = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FatturaEntityData _tmp = new FatturaEntityData();
						
			_tmp.ID = this.ID;
			
			_tmp.Intestatario = this.Intestatario;
			_tmp.Descrizione = this.Descrizione;
			_tmp.Data = this.Data;
			_tmp.Numero = this.Numero;
			_tmp.ComposedRigaFatturaID = this.ComposedRigaFatturaID;
			_tmp.AggregatedRigaFatturaID = this.AggregatedRigaFatturaID;
			_tmp.AssociatedRigaFatturaID = this.AssociatedRigaFatturaID;
			
			#region Source Parent Composite Entities
			if (this.ComposedRigaFatturaIDSource != null)
				_tmp.ComposedRigaFatturaIDSource = MakeCopyOf(this.ComposedRigaFatturaIDSource) as RigaFattura;
			if (this.AggregatedRigaFatturaIDSource != null)
				_tmp.AggregatedRigaFatturaIDSource = MakeCopyOf(this.AggregatedRigaFatturaIDSource) as RigaFattura;
			if (this.AssociatedRigaFatturaIDSource != null)
				_tmp.AssociatedRigaFatturaIDSource = MakeCopyOf(this.AssociatedRigaFatturaIDSource) as RigaFattura;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this.rigaFatturaAssociatedFatturaID != null)
				_tmp.RigaFattura = (RigaFattura) MakeCopyOf(this.RigaFattura); 
			if (this.rigaFatturaAggregatedFatturaIDGetByComposedFatturaID != null)
				_tmp.RigaFatturaCollectionGetByComposedFatturaID = (TList<RigaFattura>) MakeCopyOf(this.RigaFatturaCollectionGetByComposedFatturaID); 
			if (this.rigaFatturaAggregatedFatturaIDGetByAggregatedFatturaID != null)
				_tmp.RigaFatturaCollectionGetByAggregatedFatturaID = (TList<RigaFattura>) MakeCopyOf(this.RigaFatturaCollectionGetByAggregatedFatturaID); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FatturaColumn"/> which has raised the event.</param>
		public void OnColumnChanging(FatturaColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FatturaColumn"/> which has raised the event.</param>
		public void OnColumnChanged(FatturaColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FatturaColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(FatturaColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FatturaEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FatturaEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FatturaColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(FatturaColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FatturaEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FatturaEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FatturaEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Fattura"/> object.
	/// </remarks>
	public class FatturaEventArgs : System.EventArgs
	{
		private FatturaColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FatturaEventArgs class.
		///</summary>
		public FatturaEventArgs(FatturaColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FatturaEventArgs class.
		///</summary>
		public FatturaEventArgs(FatturaColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FatturaColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FatturaColumn" />
		public FatturaColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Fattura related events.
	///</summary>
	public delegate void FatturaEventHandler(object sender, FatturaEventArgs e);
	
	#region FatturaComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FatturaComparer : System.Collections.Generic.IComparer<Fattura>
	{
		FatturaColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FatturaComparer"/> class.
        /// </summary>
		public FatturaComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FatturaComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FatturaComparer(FatturaColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Fattura"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Fattura"/> to compare.</param>
        /// <param name="b">The second <c>Fattura</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Fattura a, Fattura b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Fattura entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Fattura a, Fattura b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FatturaColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FatturaKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Fattura"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FatturaKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FatturaKey class.
		/// </summary>
		public FatturaKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FatturaKey class.
		/// </summary>
		public FatturaKey(FatturaBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ID = entity.ID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FatturaKey class.
		/// </summary>
		public FatturaKey(System.Int32 iD)
		{
			#region Init Properties

			this.ID = iD;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FatturaBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FatturaBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ID property
		private System.Int32 _iD;
		
		/// <summary>
		/// Gets or sets the ID property.
		/// </summary>
		public System.Int32 ID
		{
			get { return _iD; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ID = value;
				
				_iD = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ID = ( values["ID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ID"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ID", ID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ID: {0}{1}",
								ID,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FatturaColumn Enum
	
	/// <summary>
	/// Enumerate the Fattura columns.
	/// </summary>
	[Serializable]
	public enum FatturaColumn : int
	{
		/// <summary>
		/// Intestatario : 
		/// </summary>
		[EnumTextValue("Intestatario")]
		[ColumnEnum("Intestatario", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Intestatario = 1,
		/// <summary>
		/// Descrizione : 
		/// </summary>
		[EnumTextValue("Descrizione")]
		[ColumnEnum("Descrizione", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Descrizione = 2,
		/// <summary>
		/// Data : 
		/// </summary>
		[EnumTextValue("Data")]
		[ColumnEnum("Data", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Data = 3,
		/// <summary>
		/// Numero : 
		/// </summary>
		[EnumTextValue("Numero")]
		[ColumnEnum("Numero", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Numero = 4,
		/// <summary>
		/// ID : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ID = 5,
		/// <summary>
		/// ComposedRigaFatturaID : 
		/// </summary>
		[EnumTextValue("ComposedRigaFatturaID")]
		[ColumnEnum("ComposedRigaFatturaID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ComposedRigaFatturaID = 6,
		/// <summary>
		/// AggregatedRigaFatturaID : 
		/// </summary>
		[EnumTextValue("AggregatedRigaFatturaID")]
		[ColumnEnum("AggregatedRigaFatturaID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AggregatedRigaFatturaID = 7,
		/// <summary>
		/// AssociatedRigaFatturaID : 
		/// </summary>
		[EnumTextValue("AssociatedRigaFatturaID")]
		[ColumnEnum("AssociatedRigaFatturaID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AssociatedRigaFatturaID = 8
	}//End enum

	#endregion FatturaColumn Enum

} // end namespace
