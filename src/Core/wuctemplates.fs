(*
 * Caffettiera
 * MGen
 * wuctemplates.fs: code template for WebUserControls generation [ASP.NET/C#]
 * (C) 2008 Alvise Spano' @ Netical
 *)
 
#light "off" 

namespace Caffettiera.FSharp.Generator

module WUCTemplates =
  struct
    open Caffettiera.FSharp.Generator
    open Caffettiera.FSharp.Generator.Gen
    open Caffettiera.FSharp.Common.Prelude
  
    (*
     * code behind
     *)
  
    let cs =
        Template (["NAME"; "USINGS"; "NAMESPACE"; "BODY"],
        "//
        // UI/WebUserControls [C#]
        // $NAME$
        //
        // Generated by Caffettiera
        // (C) 2008 Netical 
        //
        
        $USINGS$
        
        namespace $NAMESPACE$
        {
        
        $BODY$
        
        }
        ")
  
    let cs_usings =
        Template ([],
        "using System;
        using System.Data;
        using System.Configuration;
        using System.Web;
        using System.Web.Security;
        using System.Web.UI;
        using System.Web.UI.WebControls;
        using System.Web.UI.WebControls.WebParts;
        using System.Web.UI.HtmlControls;
        using System.Collections.Generic;
        using Obout.Grid;
        using Caffettiera.CSharp.UI.WebUserControls.MVP;
        ")
  
  
	(*
	 * dataobjects
	 *)
  
    let cs_dataobject =
        Template (["DO"; "BO"; "PROPERTIES"; "NAMESPACE"],
        "public partial class $DO$
        {
            private $NAMESPACE$.BOM.$BO$ bo;

			protected internal $DO$()
			{
				this.bo = new $BO$();
			}

            protected internal $DO$($NAMESPACE$.BOM.$BO$ bo)
            {
                this.bo = bo;
            }

			protected internal $DO$(int uid)
			{
				this.bo = $BO$.RetrieveByUId(uid);
			}

            public int UId
            {
                get { return bo.UId; }
            }

			public static explicit operator $BO$($DO$ dataobject) { return dataobject.bo; }

            $PROPERTIES$
        }
        ")
        
    let cs_dataobject_property =
        Template (["TYPE"; "NAME"],
        "public $TYPE$ $NAME$
        {
            get { return bo.$NAME$; }
            set { bo.$NAME$ = value; }
        }
        ")
             
    let ext_dataobject =
        Template (["DO"; "PROPERTIES"],
        "public partial class $DO$
        {
            $PROPERTIES$
        }
        ")
        
    let ext_dataobject_property =
        Template (["TYPE"; "NAME"],
        "public $TYPE$ $NAME$
        {
            get { /* put custom getter code here */ }
            set { /* put custom setter code here */ }
        }
        ")         
             
	
	(*
	 * form
	 *)
	 
	(* view *)

    let cs_form_view =
        Template (["NAME"; "NAMESPACE"; "DO"; "BO"],
        "public partial class $NAME$View : FormViewBase<$DO$>
        {
			public event ActionEventHandler Action;

			protected override void OnLoad(EventArgs e)
			{
				base.OnLoad(e);
				controlMessage.Text = \"\";
			}
			
            protected override IFormPresenter<$DO$> CreatePresenter()
            {
				return new $NAME$Presenter(this);
            }
           
            public override $DO$ DataObject
            {
                set
                {
                    grid.DataSource = value;
                    grid.DataBind();
                }
            }
            
            public FormViewMode ViewMode
			{
				get	{ return fview.CurrentMode; }
				set	{ fview.ChangeMode(value); }
			}
			
			protected void fviewModeChanging(object sender, FormViewModeEventArgs e)
			{
				fview.ChangeMode(e.NewMode);
				Fill();
			}
        }    
        ")
         
    let ext_form_view =
		Template (["NAME"; "ITEMS"; "DO"],
		"public partial class $NAME$View
		{
			protected override void Fill()
			{
				if (presenter != null && Visible && this.UId >= 0)
					presenter.Fill(this.UId);
				else
				{
					fview.DataSource = null;
					fview.DataBind();
				}
			}
			
			protected void fviewItemDeleting(object sender, FormViewDeleteEventArgs e)
			{
				try
				{
					presenter.Delete(this.UId);
					if (Action != null) Action(this, new FormActionEventArgs(FormAction.Deleted, this.UId));
					this.UId = -1;
					Fill();
				}
				catch (Exception exn)
				{
					controlMessage.ShowErrorMessage(exn.Message);
				}
			}
			
			protected void fviewItemInserting(object sender, FormViewInsertEventArgs e)
			{
				var dataobject = new $DO$();
				
				$ITEMS$
								
				// write custom item insertion code here
				
				fview.ChangeMode(FormViewMode.ReadOnly);
				try
				{
					presenter.Insert(dataobject);
					if (Action != null) Action(this, new FormActionEventArgs(FormAction.Inserted, this.UId));
				}
				catch (Exception exn)
				{
					e.Cancel = true;
					controlMessage.ShowErrorMessage(exn.Message);
				}
			}

			protected void fviewItemUpdating(object sender, FormViewUpdateEventArgs e)
			{
				var uid = (int)fview.DataKey.Value;
				var dataobject = new $DO$(uid);
				
				$ITEMS$

				// write custom item update code here
				
				fview.ChangeMode(FormViewMode.ReadOnly);
				try
				{
					presenter.Update(dataobject);
					if (Action != null) Action(this, new FormActionEventArgs(FormAction.Inserted, this.UId));
				}
				catch (Exception ex)
				{
					e.Cancel = true;
					controlMessage.ShowErrorMessage(ex.Message);
				}
			}

			protected void fviewItemCommand(object sender, FormViewCommandEventArgs e)
			{
				switch (e.CommandName)
				{
					case \"Cancel\":
						if (Action != null) Action(this, new FormActionEventArgs(FormAction.Cancelled, this.UId));
						break;
						
					// write custom command code here
				}
			}
		}
		")      
		
	let ext_form_view_item = Template (["NAME"], "dataobject.$NAME$ = ((TextBox)fview.FindControl(\"data$NAME$\")).Text;")
               
               
    (* presenter *)
	
	let cs_form_presenter =
		Template (["NAME"; "NAMESPACE"; "BO"; "DO"],
		"public partial class $NAME$Presenter : FormPresenterBase<$DO$, $NAMESPACE$.BOM.$BO$, $NAMESPACE$.BOM.Transaction>
		{
			protected internal $NAME$Presenter(IFormView<$DO$> view) : base(view) {}
			
			public void Fill(int uid)
			{
				view.DataObject = new $DO$($NAMESPACE$.BOM.$BO$.RetrieveByUId(uid));
			}
		}
		")

	let ext_form_presenter =
		Template (["NAME"; "DO"; "BO"; "NAMESPACE"],
		"public partial class $NAME$Presenter
		{
			public void Insert($DO$ dataobject)
		    {
				(($NAMESPACE$.BOM.$BO$)dataobject).Commit();
				view.DataObject = dataobject;
			}
			
			public void Update($DO$ dataobject)
		    {
				(($NAMESPACE$.BOM.$BO$)dataobject).Commit();
				view.DataObject = dataobject;
			}

			public void Delete(int uid)
			{
				var bo = $NAMESPACE$.BOM.$BO$.RetrieveByUId(uid);
				if (bo == null) throw new BONotFoundException<$NAMESPACE$.BOM.$BO$>(uid);
				bo.Remove();
				bo.Commit();
			}
		}
		")           
               
		
	(* ascx *)

	let ascx_form =
        Template (["FILENAME"; "WUCNAME"; "NAMESPACE"; "ITEMS"; "INSERTITEMS"],
        "<%@ Control Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"$FILENAME$.ascx.cs\" Inherits=\"$NAMESPACE$.$WUCNAME$\" %>
		<%@ Register Src=\"~/Manager/UserControls/Message.ascx\" TagName=\"Message\" TagPrefix=\"wuc\" %>

		<wuc:Message ID=\"controlMessage\" runat=\"server\" Visible=\"false\" />
		<asp:FormView ID=\"fview\" runat=\"server\" DefaultMode=\"ReadOnly\" DataKeyNames=\"UId\"
			OnModeChanging=\"fviewModeChanging\" OnItemDeleting=\"fviewItemDeleting\" OnItemInserting=\"fviewItemInserting\"
			OnItemUpdating=\"fviewItemUpdating\" OnItemCommand=\"fviewItemCommand\" OnDataBound=\"fviewDataBound\">
			<HeaderTemplate>
				<asp:Image ID=\"imgNew\" runat=\"server\" ImageAlign=\"AbsMiddle\" ImageUrl=\"~\Manager\Images\add.gif\" Visible='<%# fview.CurrentMode == FormViewMode.ReadOnly %>' />
				<asp:LinkButton ID=\"btnNew\" runat=\"server\"  ImageAlign=\"TextTop\" ImageUrl=\"~\Manager\Images\add.gif\" Text=\"Nuovo\" CommandName=\"New\" Visible='<%# fview.CurrentMode == FormViewMode.ReadOnly %>' />
				<asp:Image ID=\"imgEdit\" runat=\"server\" ImageAlign=\"AbsMiddle\" ImageUrl=\"~\Manager\Images\pencil.gif\" Visible='<%# fview.CurrentMode == FormViewMode.ReadOnly %>' />
				<asp:LinkButton ID=\"btnEdit\" runat=\"server\" Text=\"Modifica\" CommandName=\"Edit\" Visible='<%# fview.CurrentMode == FormViewMode.ReadOnly %>' />
				<asp:Image ID=\"imgDelete\" runat=\"server\" ImageAlign=\"AbsMiddle\" ImageUrl=\"~\Manager\Images\cross.gif\" Visible='<%# fview.CurrentMode == FormViewMode.ReadOnly %>' />
				<asp:LinkButton ID=\"btnDelete\" runat=\"server\" Text=\"Elimina\" CommandName=\"Delete\" Visible='<%# fview.CurrentMode == FormViewMode.ReadOnly %>' />
			</HeaderTemplate>
			<ItemTemplate>
				<div>
					<hr size=\"1\" style=\"height:1px;color:#ddd;text-align:left;margin:5px 0 5px 0;\" />
				</div>
				<table>
				$ITEMS$
				</table>
			</ItemTemplate>
			<EditItemTemplate>
				<table>
				$INSERTITEMS$
				</table>
				<div>
					<hr size=\"1\" style=\"height:1px;color:#ddd;text-align:left;margin:5px 0 5px 0;\" />
				</div>
			</EditItemTemplate>
			<InsertItemTemplate>
				<table>
				$INSERTITEMS$
				</table>
				<div>
					<hr size=\"1\" style=\"height:1px;color:#ddd;text-align:left;margin:5px 0 5px 0;\" />
				</div>
			</InsertItemTemplate>
			<EmptyDataTemplate>
				<div>
					Nessun elemento da visualizzare.
				</div>
				<div>
					<hr size=\"1\" style=\"height:1px;color:#ddd;text-align:left;margin:5px 0 5px 0;\" />
				</div>
				<asp:Image ID=\"imgNew\" runat=\"server\" ImageAlign=\"AbsMiddle\" ImageUrl=\"~\Manager\Images\add.gif\" />
				<asp:LinkButton ID=\"btnNew\" runat=\"server\" Text=\"Nuovo\" CommandName=\"New\" />
			</EmptyDataTemplate>
			<FooterTemplate>
				<asp:Image ID=\"imgInsert\" runat=\"server\" ImageAlign=\"AbsMiddle\" ImageUrl=\"~\Manager\Images\add.gif\" Visible='<%# fview.CurrentMode == FormViewMode.Insert %>' />
				<asp:LinkButton ID=\"btnInsert\" runat=\"server\" Text=\"Inserisci\" CommandName=\"Insert\" Visible='<%# fview.CurrentMode == FormViewMode.Insert %>' />
				<asp:Image ID=\"imgSave\" runat=\"server\" ImageAlign=\"AbsMiddle\" ImageUrl=\"~\Manager\Images\disk.gif\" Visible='<%# fview.CurrentMode == FormViewMode.Edit %>' />
				<asp:LinkButton ID=\"btnSave\" runat=\"server\" Text=\"Aggiorna\" CommandName=\"Update\" Visible='<%# fview.CurrentMode == FormViewMode.Edit %>' />
				<asp:Image ID=\"imgCancel\" runat=\"server\" ImageAlign=\"AbsMiddle\" ImageUrl=\"~\Manager\Images\lt.gif\" Visible='<%# fview.CurrentMode == FormViewMode.Insert || fview.CurrentMode == FormViewMode.Edit %>' />
				<asp:LinkButton ID=\"btnCancel\" runat=\"server\" Text=\"Annulla\" CausesValidation=\"false\" CommandName=\"Cancel\" Visible='<%# fview.CurrentMode == FormViewMode.Insert || fview.CurrentMode == FormViewMode.Edit %>' />
			</FooterTemplate>
		</asp:FormView>
        ")
    
    let ascx_form_table_item =
        Template (["NAME"],
        "<tr>
            <th class=\"field\">
                $NAME$:
            </th>
            <td>
                <asp:Label ID=\"data$NAME$\" runat=\"server\"/>
            </td>
        </tr>
        ")
        
    let ascx_form_table_insert_item_field_maxlength = Template (["N"], "MaxLength=\"$N$\"")
		
    let ascx_form_table_insert_item_string =
        Template (["NAME"; "MAXLENGTH"],
        "<tr>
            <th class=\"field\">
                $NAME$:
            </th>
            <td>
                <asp:TextBox ID=\"data$NAME$\" runat=\"server\" $MAXLENGTH$/>
            </td>
        </tr>
        ")

    let ascx_form_table_insert_item_string_required =
        Template (["NAME"; "MAXLENGTH"],
        "<tr>
            <th class=\"required\">
                $NAME$:
            </th>
            <td>
                <asp:TextBox ID=\"data$NAME$\" runat=\"server\" $MAXLENGTH$/>
                <asp:RequiredFieldValidator ID=\"rfvdata$NAME$\" runat=\"server\" ErrorMessage=\"Campo Richiesto\"
                    ControlToValidate=\"data$NAME$\">*</asp:RequiredFieldValidator>
            </td>
        </tr>
        ")

	let ascx_form_table_insert_item_datetime =
        Template (["NAME"],
        "<tr>
            <th class=\"field\">
                $NAME$:
            </th>
            <td>
                <asp:TextBox ID=\"data$NAME$\" runat=\"server\" />
                <obout:Calendar runat=\"server\" DatePickerMode=\"true\" DateFormat=\"dd/MM/yyyy\" DatePickerImagePath=\"~/Images/calendar.gif\" TextBoxId=\"data$NAME$\" />
                <asp:RegularExpressionValidator ID=\"revdata$NAME$\" runat=\"server\" ErrorMessage=\"Dati inseriti sbagliati\" ControlToValidate=\"data$NAME$\"
					ValidationExpression=\"^(((0[1-9]|[12]\\d|3[01])\\/(0[13578]|1[02])\\/((1[6-9]|[2-9]\\d)\\d{2}))|((0[1-9]|[12]\\d|30)\\/(0[13456789]|1[012])\\/((1[6-9]|[2-9]\\d)\\d{2}))|((0[1-9]|1\\d|2[0-8])\\/02\\/((1[6-9]|[2-9]\\d)\\d{2}))|(29\\/02\\/((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$\">*</asp:RegularExpressionValidator>
                </td>
            </td>
        </tr>
        ")
       
	let ascx_form_table_insert_item_datetime_required =
        Template (["NAME"],
        "<tr>
            <th class=\"required\">
                $NAME$:
            </th>
            <td>
                <asp:TextBox ID=\"data$NAME$\" runat=\"server\" />
                <obout:Calendar runat=\"server\" DatePickerMode=\"true\" DateFormat=\"dd/MM/yyyy\" DatePickerImagePath=\"~/Images/calendar.gif\" TextBoxId=\"data$NAME$\" />
                <asp:RequiredFieldValidator ID=\"rfvdata$NAME$\" runat=\"server\" ErrorMessage=\"Campo Richiesto\" ControlToValidate=\"data$NAME$\">*</asp:RequiredFieldValidator>
                <asp:RegularExpressionValidator ID=\"revdata$NAME$\" runat=\"server\" ErrorMessage=\"Dati inseriti sbagliati\" ControlToValidate=\"data$NAME$\"
					ValidationExpression=\"^(((0[1-9]|[12]\\d|3[01])\\/(0[13578]|1[02])\\/((1[6-9]|[2-9]\\d)\\d{2}))|((0[1-9]|[12]\\d|30)\\/(0[13456789]|1[012])\\/((1[6-9]|[2-9]\\d)\\d{2}))|((0[1-9]|1\\d|2[0-8])\\/02\\/((1[6-9]|[2-9]\\d)\\d{2}))|(29\\/02\\/((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$\">*</asp:RegularExpressionValidator>
                </td>
            </td>
        </tr>
        ")
		
	let ascx_form_table_insert_item_integer =
        Template (["NAME"],
        "<tr>
            <th class=\"field\">
                $NAME$:
            </th>
            <td>
                <asp:TextBox ID=\"data$NAME$\" runat=\"server\" />
				<asp:RegularExpressionValidator ID=\"revdata$NAME$\" runat=\"server\" ErrorMessage=\Dati inseriti non validi\"
					ControlToValidate=\"data$NAME$\" ValidationExpression=\"^\\d+$\">*</asp:RegularExpressionValidator>
                </td>
            </td>
        </tr>
        ")
        
	let ascx_form_table_insert_item_integer_required =
        Template (["NAME"],
        "<tr>
            <th class=\"required\">
                $NAME$:
            </th>
            <td>
                <asp:TextBox ID=\"data$NAME$\" runat=\"server\" />
				<asp:RequiredFieldValidator ID=\"rfvdata$NAME$\" runat=\"server\" ErrorMessage=\"Campo Richiesto\" ControlToValidate=\"data$NAME$\">*</asp:RequiredFieldValidator>
                <asp:RegularExpressionValidator ID=\"revdata$NAME$\" runat=\"server\" ErrorMessage=\Dati inseriti non validi\"
					ControlToValidate=\"data$NAME$\" ValidationExpression=\"^\d+$\">*</asp:RegularExpressionValidator>
                </td>
            </td>
        </tr>
        ")
	
	
	(*
	 * grid
	 *)

	(* ascx *)
	
	let ascx_grid =
        Template (["FILENAME"; "WUCNAME"; "NAMESPACE"; "COLUMNS"],
        "<%@ Control Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"$FILENAME$.ascx.cs\" Inherits=\"$NAMESPACE$.$WUCNAME$View\" %>
        <%@ Register TagPrefix=\"obout\" Namespace=\"Obout.Grid\" Assembly=\"obout_Grid_NET\" %>

        <obout:Grid ID=\"grid\" runat=\"server\"
            EnableRecordHover=\"True\"
            Width=\"100%\"
            AllowAddingRecords=\"False\" 
            AutoGenerateColumns=\"False\"
            AllowFiltering=\"True\"
            >
        </obout:Grid>
        <Columns>
			<obout:Column DataField=\"UId\" HeaderText=\"Id\" runat=\"server\" Width=\"40\"/>
			$COLUMNS$
		</Columns>
         ")

	let ascx_grid_column =
		Template (["NAME"], "<obout:Column DataField=\"$NAME$\" HeaderText=\"$NAME$\" runat=\"server\" Width=\"120\" />")

         
	(* presenter *)
	
	let cs_grid_presenter =
		Template (["NAME"; "NAMESPACE"; "BO"; "DO"],
		"public partial class $NAME$Presenter : GridPresenterBase<$DO$, $NAMESPACE$.BOM.$BO$, $NAMESPACE$.BOM.Transaction>
		{
			protected internal $NAME$Presenter(IGridView<$DO$> view) : base(view) {}
			
			protected internal DO GetDataObject(int uid)
			{
				 return $NAMESPACE$.BOM.$BO$.RetrieveByUId(uid);
			}	
		}
		")
        
	let ext_grid_presenter =
		Template (["NAME"; "DO"; "BO"; "NAMESPACE"],
		"public partial class $NAME$Presenter
		{
			public override void Fill()
			{
				view.DataObjects =
					Caffettiera.CSharp.Common.CollectionMapper<ICollection<$DO$>, $DO$>.map<$BO$>(
						$NAMESPACE$.BOM.$BO$.RetrieveAll(),
						(bo) => new $DO$(bo),
						() => new List<$DO$>());
			}
			
			public override void Delete(int uid)
			{
				// insert custom code here
			}
		}
		")

	
	(* view *)

    let cs_grid_view =
        Template (["NAME"; "NAMESPACE"; "DO"; "BO"; "COLUMNS"],
        "public partial class $NAME$View : GridViewBase<$DO$>
        {
	        public event SelectedEventHandler Selected;

			protected void gridOnSelect(object sender, Obout.Grid.GridRecordEventArgs e)
			{
				if (grid.SelectedRecords != null && grid.SelectedRecords.Count == 1)
				{
					var rowvalues = (Hashtable)grid.SelectedRecords[0];
					var id = Convert.ToInt32(rowvalues[\"UId\"]);
					this.SelectedUId = id;
					if (Selected != null) Selected(this, id);
				}
			}

			protected void gridOnLoad(object sender, EventArgs e)
			{
				int selected = -1;
				if (grid.SelectedRecords != null && grid.SelectedRecords.Count == 1)
				{
					var rowvalues = (Hashtable)grid.SelectedRecords[0];
					selected = Convert.ToInt32(rowvalues[\"UId\"]);
				}

				if (this.SelectedUId > 0)
				{
					if (this.SelectedUId != selected)
					{
						var item = presenter.GetDataObject(this.SelectedUId);
						Hashtable oRecord = new Hashtable();
						oRecord.Add(\"UId\", item.UId);

						// columns initialization
						$COLUMNS$

						grid.SelectedRecords = new ArrayList();
						grid.SelectedRecords.Add(oRecord);
					}
				}
				else
					grid.SelectedRecords = new ArrayList();

				if (grid.DataSource == null) Fill();
			}
        
            protected override IGridPresenter<$DO$> CreatePresenter()
            {
				return new $NAME$Presenter(this);
            }
           
            public override ICollection<$DO$> DataObjects
            {
                set
                {
                    grid.DataSource = value;
                    grid.DataBind();
                }
            }
        }    
        ")
        
	let cs_grid_view_column = Template (["NAME"], "oRecord.Add(\"$NAME$\", item.$NAME$);")
  
    let ext_grid_view =
		Template (["NAME"],
		"public partial class $NAME$View
		{
			protected override void Fill()
			{
				if (presenter != null) presenter.Fill();
			}
		}
		")      
    
  end