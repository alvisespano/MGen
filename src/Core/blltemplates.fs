(*
 * Caffettiera
 * MGen
 * ddltemplates.fs: code template for DDL generation [MSSQL2005]
 * (C) 2008 Alvise Spano' @ Netical
 *)
 
#light "off" 

namespace Caffettiera.FSharp.Generator

module BLLTemplates =
  struct
    open Caffettiera.FSharp.Generator
    open Caffettiera.FSharp.Generator.Gen
    open Caffettiera.FSharp.Common.Prelude
  
   let compilation_item =
        Template (["NAME"; "USINGS"; "NAMESPACE"; "BODY"],
        "//
        // BLL [C#]
        // $NAME$
        //
        // Generated by MGen/Caffettiera
        // (C) 2008 Netical 
        //
        
        $USINGS$
        
        namespace $NAMESPACE$.BLL
        {
        
        $BODY$
        
        }
        ")
  
    let usings =
        Template ([],
        "using System;
        using System.Collections;
        using System.Collections.Generic;
        using Caffettiera.CSharp.Common;
        ")
        
	let interfacee =
		Template (["NAME"; "METHODS"; "PROPERTIES"],
		"public interface I$NAME$
		{
			$PROPERTIES$
			
			$METHODS$
		}
		")
         
    let classs =
		Template (["NAME"; "METHODS"; "USES"; "NEWS"],
		"public partial class $NAME$ : I$NAME$
		{
		    $USES$
		    
		    public $NAME$()
		    {
		        $NEWS$
		    }
		
			$METHODS$
		}
		")     
		
    let ext_class =
		Template (["NAME"; "PROPERTIES"; "METHODS"],
		"public partial class $NAME$
		{
		    $PROPERTIES$
		
			$METHODS$
		}
		")     
         
    let property_signature = Template (["NAME"; "TYPE"], "$TYPE$ $NAME$ { get; set; }")
            
    let property_not_implemented =
        Template (["NAME"; "TYPE"],
        "$TYPE$ $NAME$
        {
            get { throw new NotImplementedException(\"property $NAME$ getter not implemented\"); }
            set { throw new NotImplementedException(\"property $NAME$ setter not implemented\"); }
        }
        ")
            
    let method_arg = Template (["NAME"; "TYPE"], "$TYPE$ $NAME$")    
        
    let method_signature = Template (["NAME"; "RTYPE"; "ARGS"], "$RTYPE$ $NAME$($ARGS$);")
       
    let method_stub =
        Template (["BLL"; "NAME"; "APP"; "ARGS"; "RTYPE"; "RETURN"],
        "public $RTYPE$ $NAME$($ARGS$)
        {
            $RETURN$ stubbed$BLL$.$NAME$($APP$);
        }
        ")
        
    let method_not_implemented =
        Template (["NAME"; "ARGS"; "RTYPE"],
        "public $RTYPE$ $NAME$($ARGS$)
        {
            // insert code here
            throw new NotImplementedException(\"method $NAME$ not implemented\");
        }
        ")
        
    let stubbed_use = Template (["NAME"], "protected I$NAME$ stubbed$NAME$;")
        
    let stubbed_new = Template (["NAME"], "stubbed$NAME$ = new $NAME$();")
    
    
  end